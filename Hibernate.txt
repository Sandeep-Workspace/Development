Hibernate
==========
A framework for persisting/saving Java objects in database.

Java App -> Hibernate -> Database

Benefits
---------------------------------------
Hibernate handles all low level sql
Minimize amount of JDBC code you have to develop
Hibernate provides Object to Relational mapping.(ORM)


ORM
======
Developer defines mapping between java classes and database table.
(Java class same field in db table)

Saving object with hibernate
create object
int id = (Integer)session.save(theStudent); //session is hibernate object 
Hibernate returns primary key on saving object

Retrieving object from using primary key
Object object = session.get(Student.class,primarykey);

Below we are using Hibernate Query Language
=============================================
Quering for Java Objects
Query query =session.createQuery("from ClassName");
List<ClassName> listObject =query.list();

Above code will give all data from db table

Hibernate uses JDBC for all database communication.It is another layer of abstraction on top of JDBC.

Hibernate Annotation
========================
Entity Class
Java class that is mapped to database table.

Two options for mapping 
XML config file
Java annotation

@Id for primary key annotation

@Column(name="first_name")
private String firstName;


SessionFactory : Reads hibernate config file, create session objects, Only create once in your app then reuse SessionFactory.

Session is wrapper around JDBC connection.
Main object is to save/retrieve objects.
short lived objectretrieved from seesion factory


save a object 
create session factory
get session from session factory object
create object of class you want to store
begin transaction
session.save(object);
session.getTransaction.commit();

@GeneratedValue(strategy=GenerationType.IDENTITY) to specify these field should be used for generation


Hibernate Query Language
===========================
Query Language for retrieving objects.
Similar in nature to SQL.
where,Like,order by,join,in etc..

Retrieving All students
========================
List<Student> theStudents = session.createQuery("from Student").getResultList();

In above query we have to Java Class name(Student) instead of table name.

Retrieve Student whose last name is Singh
============================================
List<Student> theStudents = session.createQuery("from Student s where s.lastName='Singh'").getResultList();

In above query use Java property name (not column name)

Retrieving Student using OR predicate
======================================
List<Student> theStudents = session.createQuery("from Student s where s.lastName='Singh'"+" OR s.firstName='Sachin').getResultList();

In above query use Java property name (not column name)

Retrieving Student using Like Predicate
========================================
List<Student> theStudents = session.createQuery("from Student s where"+"s.email LIKE '%luv2code.com'").getResultList();

In above query use Java property name (not column name)


CasCade
========
We can cascade operations. Apply the same operation to related entities.
If we delete Instructr, we should also delete their instructor_detail. This is know as "CASCADE DELETE".

Fetch Type:Eager vs Lazy Loading
==================================
When we fetch retrieve data should we retrieve everything?
Eager will retrieve everything.
Lazy will retrieve on request.

Foreign Key: Main purpose is to preserve relationship between tables.
Referential Integrity:Prevents operations that would destroy relationship.

Als ensure only valid data is inserted into the foreign key column. It can only contain valid reference to primary key in other table.

@JoinColumn(name="column name of foreign key specified in this table")

//set up mapping to instructordetail entity
	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name="instructor_detail_id")
	private InstructorDetail instructorDetail;
	
//	@OneToOne(mappedBy = instructorDetail)
	private Instructor instructor;
	
mappedBy refers to InstructorDetail property in Instructor class.

mappedBy tells Hibernate:
Look at the instructorDetail property in the Instructor class.
Use information from the Instructor class @JoinColumn.
To help find associated instructor.






























